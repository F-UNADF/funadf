{
  "version": 3,
  "sources": ["../../../../../../node_modules/vuetify/src/labs/VFileUpload/VFileUpload.tsx", "../../../../../../node_modules/vuetify/src/labs/VFileUpload/VFileUploadItem.tsx"],
  "sourcesContent": ["// Styles\nimport './VFileUpload.sass'\n\n// Components\nimport { VFileUploadItem } from './VFileUploadItem'\nimport { VBtn } from '@/components/VBtn/VBtn'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider/VDefaultsProvider'\nimport { makeVDividerProps, VDivider } from '@/components/VDivider/VDivider'\nimport { VIcon } from '@/components/VIcon/VIcon'\nimport { VOverlay } from '@/components/VOverlay/VOverlay'\nimport { makeVSheetProps, VSheet } from '@/components/VSheet/VSheet'\n\n// Composables\nimport { makeDelayProps } from '@/composables/delay'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { IconValue } from '@/composables/icons'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { onMounted, onUnmounted, ref, shallowRef } from 'vue'\nimport { filterInputAttrs, genericComponent, only, propsFactory, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { PropType, VNode } from 'vue'\n\nexport type VFileUploadSlots = {\n  browse: {\n    props: { onClick: (e: MouseEvent) => void }\n  }\n  default: never\n  icon: never\n  input: {\n    inputNode: VNode\n  }\n  item: {\n    file: File\n    props: { 'onClick:remove': () => void }\n  }\n  title: never\n  divider: never\n}\n\nexport const makeVFileUploadProps = propsFactory({\n  browseText: {\n    type: String,\n    default: '$vuetify.fileUpload.browse',\n  },\n  dividerText: {\n    type: String,\n    default: '$vuetify.fileUpload.divider',\n  },\n  title: {\n    type: String,\n    default: '$vuetify.fileUpload.title',\n  },\n  subtitle: String,\n  icon: {\n    type: IconValue,\n    default: '$upload',\n  },\n  modelValue: {\n    type: [Array, Object] as PropType<File[] | File>,\n    default: null,\n    validator: (val: any) => {\n      return wrapInArray(val).every(v => v != null && typeof v === 'object')\n    },\n  },\n  clearable: Boolean,\n  disabled: Boolean,\n  hideBrowse: Boolean,\n  multiple: Boolean,\n  scrim: {\n    type: [Boolean, String],\n    default: true,\n  },\n  showSize: Boolean,\n  name: String,\n\n  ...makeDelayProps(),\n  ...makeDensityProps(),\n  ...only(makeVDividerProps({\n    length: 150,\n  }), ['length', 'thickness', 'opacity']),\n  ...makeVSheetProps(),\n}, 'VFileUpload')\n\nexport const VFileUpload = genericComponent<VFileUploadSlots>()({\n  name: 'VFileUpload',\n\n  inheritAttrs: false,\n\n  props: makeVFileUploadProps(),\n\n  emits: {\n    'update:modelValue': (files: File[]) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const { t } = useLocale()\n    const { densityClasses } = useDensity(props)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      props.modelValue,\n      val => wrapInArray(val),\n      val => (props.multiple || Array.isArray(props.modelValue)) ? val : val[0],\n    )\n\n    const dragOver = shallowRef(false)\n    const vSheetRef = ref<InstanceType<typeof VSheet> | null>(null)\n    const inputRef = ref<HTMLInputElement | null>(null)\n\n    onMounted(() => {\n      vSheetRef.value?.$el.addEventListener('dragover', onDragOver)\n      vSheetRef.value?.$el.addEventListener('drop', onDrop)\n    })\n\n    onUnmounted(() => {\n      vSheetRef.value?.$el.removeEventListener('dragover', onDragOver)\n      vSheetRef.value?.$el.removeEventListener('drop', onDrop)\n    })\n\n    function onDragOver (e: DragEvent) {\n      e.preventDefault()\n      e.stopImmediatePropagation()\n      dragOver.value = true\n    }\n\n    function onDragLeave (e: DragEvent) {\n      e.preventDefault()\n      dragOver.value = false\n    }\n\n    function onDrop (e: DragEvent) {\n      e.preventDefault()\n      e.stopImmediatePropagation()\n      dragOver.value = false\n\n      const files = Array.from(e.dataTransfer?.files ?? [])\n\n      if (!files.length) return\n\n      if (!props.multiple) {\n        model.value = [files[0]]\n\n        return\n      }\n\n      const array = model.value.slice()\n\n      for (const file of files) {\n        if (!array.some(f => f.name === file.name)) {\n          array.push(file)\n        }\n      }\n\n      model.value = array\n    }\n\n    function onClick () {\n      inputRef.value?.click()\n    }\n\n    function onClickRemove (index: number) {\n      model.value = model.value.filter((_, i) => i !== index)\n\n      if (model.value.length > 0 || !inputRef.value) return\n\n      inputRef.value.value = ''\n    }\n\n    useRender(() => {\n      const hasTitle = !!(slots.title || props.title)\n      const hasIcon = !!(slots.icon || props.icon)\n      const hasBrowse = !!(!props.hideBrowse && (slots.browse || props.density === 'default'))\n      const cardProps = VSheet.filterProps(props)\n      const dividerProps = VDivider.filterProps(props)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n\n      const inputNode = (\n        <input\n          ref={ inputRef }\n          type=\"file\"\n          disabled={ props.disabled }\n          multiple={ props.multiple }\n          name={ props.name }\n          onChange={ e => {\n            if (!e.target) return\n\n            const target = e.target as HTMLInputElement\n            model.value = [...target.files ?? []]\n          }}\n          { ...inputAttrs }\n        />\n      )\n\n      return (\n        <>\n          <VSheet\n            ref={ vSheetRef }\n            { ...cardProps }\n            class={[\n              'v-file-upload',\n              {\n                'v-file-upload--clickable': !hasBrowse,\n                'v-file-upload--disabled': props.disabled,\n                'v-file-upload--dragging': dragOver.value,\n              },\n              densityClasses.value,\n            ]}\n            onDragleave={ onDragLeave }\n            onDragover={ onDragOver }\n            onDrop={ onDrop }\n            onClick={ !hasBrowse ? onClick : undefined }\n            { ...rootAttrs }\n          >\n            { hasIcon && (\n              <div key=\"icon\" class=\"v-file-upload-icon\">\n                { !slots.icon ? (\n                  <VIcon\n                    key=\"icon-icon\"\n                    icon={ props.icon }\n                  />\n                ) : (\n                  <VDefaultsProvider\n                    key=\"icon-defaults\"\n                    defaults={{\n                      VIcon: {\n                        icon: props.icon,\n                      },\n                    }}\n                  >\n                    { slots.icon() }\n                  </VDefaultsProvider>\n                )}\n              </div>\n            )}\n\n            { hasTitle && (\n              <div key=\"title\" class=\"v-file-upload-title\">\n                { slots.title?.() ?? t(props.title) }\n              </div>\n            )}\n\n            { props.density === 'default' && (\n              <>\n                <div key=\"upload-divider\" class=\"v-file-upload-divider\">\n                  { slots.divider?.() ?? (\n                    <VDivider { ...dividerProps }>\n                      { t(props.dividerText) }\n                    </VDivider>\n                  )}\n                </div>\n\n                { hasBrowse && (\n                  <>\n                    { !slots.browse ? (\n                      <VBtn\n                        readonly={ props.disabled }\n                        size=\"large\"\n                        text={ t(props.browseText) }\n                        variant=\"tonal\"\n                        onClick={ onClick }\n                      />\n                    ) : (\n                      <VDefaultsProvider\n                        defaults={{\n                          VBtn: {\n                            readonly: props.disabled,\n                            size: 'large',\n                            text: t(props.browseText),\n                            variant: 'tonal',\n                          },\n                        }}\n                      >\n                        { slots.browse({ props: { onClick } }) }\n                      </VDefaultsProvider>\n                    )}\n                  </>\n                )}\n\n                { props.subtitle && (\n                  <div class=\"v-file-upload-subtitle\">\n                    { props.subtitle }\n                  </div>\n                )}\n              </>\n            )}\n\n            <VOverlay\n              model-value={ dragOver.value }\n              contained\n              scrim={ props.scrim }\n            />\n\n            { slots.input?.({ inputNode }) ?? inputNode }\n          </VSheet>\n\n          { model.value.length > 0 && (\n            <div class=\"v-file-upload-items\">\n              { model.value.map((file, i) => {\n                const slotProps = {\n                  file,\n                  props: {\n                    'onClick:remove': () => onClickRemove(i),\n                  },\n                }\n\n                return (\n                  <VDefaultsProvider\n                    key={ i }\n                    defaults={{\n                      VFileUploadItem: {\n                        file,\n                        clearable: props.clearable,\n                        disabled: props.disabled,\n                        showSize: props.showSize,\n                      },\n                    }}\n                  >\n                    { slots.item?.(slotProps) ?? (\n                      <VFileUploadItem\n                        key={ i }\n                        onClick:remove={ () => onClickRemove(i) }\n                        v-slots={ slots }\n                      />\n                    )}\n                  </VDefaultsProvider>\n                )\n              })}\n            </div>\n          )}\n        </>\n      )\n    })\n  },\n})\n\nexport type VFileUpload = InstanceType<typeof VFileUpload>\n", "// Components\nimport { VAvatar } from '@/components/VAvatar/VAvatar'\nimport { VBtn } from '@/components/VBtn/VBtn'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider/VDefaultsProvider'\nimport { makeVListItemProps, VListItem } from '@/components/VList/VListItem'\n\n// Utilities\nimport { computed, ref, watchEffect } from 'vue'\nimport { genericComponent, humanReadableFileSize, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VListItemSlots } from '@/components/VList/VListItem'\n\nexport type VFileUploadItemSlots = {\n  clear: {\n    props: { onClick: () => void }\n  }\n} & VListItemSlots\n\nexport const makeVFileUploadItemProps = propsFactory({\n  clearable: Boolean,\n  file: {\n    type: Object as PropType<File>,\n    default: null,\n  },\n  fileIcon: {\n    type: String,\n    // TODO: setup up a proper aliased icon\n    default: 'mdi-file-document',\n  },\n  showSize: Boolean,\n\n  ...makeVListItemProps({\n    border: true,\n    rounded: true,\n    lines: 'two' as const,\n  }),\n}, 'VFileUploadItem')\n\nexport const VFileUploadItem = genericComponent<VFileUploadItemSlots>()({\n  name: 'VFileUploadItem',\n\n  props: makeVFileUploadItemProps(),\n\n  emits: {\n    'click:remove': () => true,\n    click: (e: MouseEvent | KeyboardEvent) => true,\n  },\n\n  setup (props, { emit, slots }) {\n    const preview = ref()\n    const base = computed(() => typeof props.showSize !== 'boolean' ? props.showSize : undefined)\n\n    function onClickRemove () {\n      emit('click:remove')\n    }\n\n    watchEffect(() => {\n      preview.value = props.file?.type.startsWith('image') ? URL.createObjectURL(props.file) : undefined\n    })\n\n    useRender(() => {\n      const listItemProps = VListItem.filterProps(props)\n\n      return (\n        <VListItem\n          { ...listItemProps }\n          title={ props.title ?? props.file?.name }\n          subtitle={ props.showSize ? humanReadableFileSize(props.file?.size, base.value) : props.file?.type }\n          class=\"v-file-upload-item\"\n        >\n          {{\n            ...slots,\n            prepend: slotProps => (\n              <>\n                { !slots.prepend ? (\n                  <VAvatar\n                    icon={ props.fileIcon }\n                    image={ preview.value }\n                    rounded\n                  />\n                ) : (\n                  <VDefaultsProvider\n                    defaults={{\n                      VAvatar: {\n                        image: preview.value,\n                        icon: !preview.value ? props.fileIcon : undefined,\n                        rounded: true,\n                      },\n                    }}\n                  >\n                    { slots.prepend?.(slotProps) ?? (\n                      <VAvatar />\n                    )}\n                  </VDefaultsProvider>\n                )}\n              </>\n            ),\n            append: slotProps => (\n              <>\n                { props.clearable && (\n                  <>\n                    { !slots.clear ? (\n                      <VBtn\n                        icon=\"$clear\"\n                        density=\"comfortable\"\n                        variant=\"text\"\n                        onClick={ onClickRemove }\n                      />\n                    ) : (\n                      <VDefaultsProvider\n                        defaults={{\n                          VBtn: {\n                            icon: '$clear',\n                            density: 'comfortable',\n                            variant: 'text',\n                          },\n                        }}\n                      >\n                        { slots.clear?.({\n                          ...slotProps,\n                          props: { onClick: onClickRemove },\n                        }) ?? (<VBtn />)}\n                      </VDefaultsProvider>\n                    )}\n                  </>\n                )}\n\n                { slots.append?.(slotProps) }\n              </>\n            ),\n          }}\n        </VListItem>\n      )\n    })\n  },\n})\n\nexport type VFileUploadItem = InstanceType<typeof VFileUploadItem>\n"],
  "mappings": "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",
  "names": ["makeVFileUploadItemProps", "propsFactory", "clearable", "Boolean", "file", "type", "Object", "default", "fileIcon", "String", "showSize", "makeVListItemProps", "border", "rounded", "lines", "VFileUploadItem", "genericComponent", "name", "props", "emits", "click:remove", "click", "e", "setup", "_ref", "emit", "slots", "preview", "ref", "base", "computed", "undefined", "onClickRemove", "watchEffect", "value", "startsWith", "URL", "createObjectURL", "useRender", "listItemProps", "VListItem", "filterProps", "_createVNode", "_mergeProps", "title", "humanReadableFileSize", "size", "prepend", "slotProps", "_Fragment", "VAvatar", "VDefaultsProvider", "image", "icon", "append", "clear", "VBtn", "density", "variant", "onClick", "makeVFileUploadProps", "propsFactory", "browseText", "type", "String", "default", "dividerText", "title", "subtitle", "icon", "IconValue", "modelValue", "Array", "Object", "validator", "val", "wrapInArray", "every", "v", "clearable", "Boolean", "disabled", "hideBrowse", "multiple", "scrim", "showSize", "name", "makeDelayProps", "makeDensityProps", "only", "makeVDividerProps", "length", "makeVSheetProps", "VFileUpload", "genericComponent", "inheritAttrs", "props", "emits", "files", "setup", "_ref", "attrs", "slots", "t", "useLocale", "densityClasses", "useDensity", "model", "useProxiedModel", "isArray", "dragOver", "shallowRef", "vSheetRef", "ref", "inputRef", "onMounted", "value", "$el", "addEventListener", "onDragOver", "onDrop", "onUnmounted", "removeEventListener", "e", "preventDefault", "stopImmediatePropagation", "onDragLeave", "from", "dataTransfer", "array", "slice", "file", "some", "f", "push", "onClick", "click", "onClickRemove", "index", "filter", "_", "i", "useRender", "hasTitle", "hasIcon", "hasBrowse", "browse", "density", "cardProps", "VSheet", "filterProps", "dividerProps", "VDivider", "rootAttrs", "inputAttrs", "filterInputAttrs", "inputNode", "_createVNode", "_mergeProps", "target", "_Fragment", "undefined", "VIcon", "VDefaultsProvider", "divider", "VBtn", "readonly", "size", "text", "variant", "VOverlay", "input", "map", "slotProps", "onClick:remove", "VFileUploadItem", "item"]
}
